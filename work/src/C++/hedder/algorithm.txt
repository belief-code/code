    max　引数の中で最大のものを持ってくる。
    transform　第1,2引数でコピー元の範囲を指定し、第3引数でコピー先の位置を指定。
コピーの際に最後の引数で変更を加える。
    reverse(str.begin(), str.end());
文字列を逆順にできる。特定の場面で超便利。

    sort 配列を昇順にソートする。sort(v.begin(),v.end())降順にしたい場合は
第3引数にgreater<int>{}を入れる。第3引数に入れるものによって色々出来るっぽい

    __gcd(a,b) aとbの最大公約数を返す。計算量O(loga)で高速。
また、これを使って最小公倍数は(a/__gcd(a,b))*bで計算できる。

    lower_bound 二分探索をする関数(返す値はイテレーター)
配列aがl番目からr-1番目まで小さい順に要素がソートされているときに、
lower_bound(a+l,a+r,x)-aというプログラムは
a[l]からa[r-1]までの中で初めてx以上となるようなインデックスを返す。
計算量はO(logN)

    count(v.begin(),v.end(),x) vの中でxの数を整数型で返す。

    find(v.begin(),v.end(),x) vの中にxがある時最初のイテレーター。ない場合v.end()を返す。

    next_permutation(v.begin(),v.end()) vの中身を次の順列順に入れ替える。
    次の順列順が存在しない場合0を返す(多分)。全ての順列のパターンを巡回したい場合は
    vの中身を予めソートしておかないと行けない。
    これを使うタイミングはかなり限定されていて
    do{

    }while(next_permutation(v.begin(),v.end()))
    このような感じで順列全探索するときにしか基本は使わない。
