    全ての問題はどの操作をするかで枝を分けて手順を踏んでいくような木を書くことで多分理論上解ける。
でも実際にその木から実装していくのはかなりきつい場合が多い。そこで下に問題の大きな種類と解法を書いていく
 
    木を書いて普通に実装できる→DFS,BFS

        多変数関数的構造が有る時は、定義域と値域、実質的な変数の数に注意を払う
    多変数関数的構造がある→変数の制約を確認して変数を減らして定義域で全探索
    多変数関数的構造があり、逆関数を定義できる。(競プロ的には逆関数が定義できるかは大体の場合で
値域内の値を入力した時定義域内に出力されることを判定することが出来るか？って感じ(この文今後推敲すべき))
→制約を考えても定義域がクソデカの場合は値域を全探索する。値域もクソデカだったら別の解法考えるか
数学的に頑張って値域もしくは定義域を減らすべき









    動的計画法
箱を一定数用意しておいて同じ計算を箱に値を入れておくことで省く。
再帰関数でメモしていくのはメモ探索って言われる
再帰関数をとくに使わずに漸化式をループで回して表を埋めていくのを動的計画法っていう

実装時の注意
ゲーム的な問題などの場合はijまでの値ではなくijから試行開始したときの値などにすると良いことが多い。
