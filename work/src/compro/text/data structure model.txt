    グラフ(グラフ理論)

    木

    Union-Find
    
    
    
    
    
    
    
    
    Binary Indexed Tree(BIT)

    
参考資料:https://www.slideshare.net/hcpc_hokudai/binary-indexed-tree
次の2つを行うことに主に長けたデータ構造
-iが与えられたときにi番目までの累積和の計算
-iとxが与えられたときにaiにxを足す事ができる。(つまりすべての要素一つ一つに対して
操作を行える)
このどちらもがlogn箇所にしか行わないためo(logn)ですむ。
要素に対する操作については遅いけど累積和の計算は爆速

具体的に扱うときはBITのデータ構造のイメージ図と割当番号の2進数表示をイメージする
また操作を行うときにLSBという値を用いて行うと簡単。
LSB(Least Significant Bit)→2進数で表現したときに初めて1が来るのは右から何番目?
LSBはデータ構造の階層的なものとリンクしている。LSB=1ならば一番下のただの要素の階層。

LSBの求め方
参考資料https://qiita.com/DaikiSuyama/items/7295f5160a51684554a7
    LSBはi&(-i)で取得可能
証明:PC内では最上位の数字が1ならば正0ならば負と判定している。
またこのことと補数(ビット表記して全てのビットを反転したもの)を使って
0の補数=-1、1の補数=-2というように表記している。
なので-1=1の補数+1。これが各iについてなりたつので-i=iの補数+1
iの補数+1というのは、iのLSBをxとすると二進数表現での右から1~x-1番目は0で右からx番目は
1になります。よって、iをビット反転させたものの二進数表現での右から1~x-1番目は1で右から
x番目は0になります。これに1を足すとxまでの桁が全て繰り上がって0になりx
部分だけ1になるのでiと-iの一致する部分がxだけになる。これによりわかる。



