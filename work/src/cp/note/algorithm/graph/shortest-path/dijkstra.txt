0.ダイクストラ法とはなにか
　非負辺のみで構成されたグラフ上での最短経路を求めるアルゴリズム



1.ダイクストラ法のもっともらしさ
　非負辺で構成される(かつそんなに辺が多くない)という制約のもとで、
全探索的に最短経路を求めることを考える。
　まずそもそも何も課さない全探索を始めると停止しない。
というのも、閉路が存在するときに回り続けることが出来るからである。
このことからもわかるが、非負辺である場合にはそもそも閉路を回ることは明らかに悪い選択なので、
これは枝刈りしたほうが良い。この枝刈りは一つの頂点は一度しか到達しない、という条件により
実現可能。こうすると一応停止はするようになる。
しかしこのままだと最悪計算量V!となりかなりきつい。
　ここで、枝刈りを行うときの典型的なこころを紹介する。
-その時点で最善となりうらないことが確定出来るような特徴を考え、その特徴を持ったノードからは探索を行わない
-最善となりうらない特徴は、最善の場合に必ず成り立つ特徴をその時点で持ち得ないような特徴
このもとで考えると、
最短経路においてはその全ての経路上の頂点は原点から最短経路で到達している。
という特徴が最善の場合には必ず成り立つ。
つまり、常に最短経路となるように伸びていく経路を作っていければ、
そのような探索の仕方は枝刈りが出来ている。といえる。
(枝刈りが出来るからと言って計算量が下がるとは限らない。また最短経路となるように伸ばしていくことが
最悪計算量が最も下がるアルゴリズムになるとは限らない。がこれは十分に良さそうな方針であることはわかるはず)
この元で、常に最短経路を伸ばしていくような方法がないか、考える(ある保証はない)
　この時に原点から伸びる辺の長さを列挙した時にその中で最短の辺の先の頂点は、
その辺を辿って原点から移動する場合に最短経路の一つを取る。と初操作から順番に考えるとまず初手からわかる。
(このことは、他の辺を経由してその頂点に到達する場合、少なくとも最短の辺以上の長さの辺を経由するので
それよりも短くなりえないことからわかる)
このことが次の状態でも行えないか考える。すると、その頂点を含む最短経路の確定した頂点集合から
伸びる経路の中から、最も短いものは初手操作と同様にその経路の先の頂点への最短経路の一つであることが保証出来る。
このことを繰り返すことですべての頂点に、最短経路を伸ばしていくかのように、最短経路を繋ぐ事ができ、
最短経路が求まる。
　振り返ってみればこのことは枝刈りの観点からある程度妥当な思考を辿って到達したアルゴリズムであることがわかるだろう。
少なくとも非負辺グラフの最短経路問題においては、結局根底には状態遷移のグラフが存在するので、
操作系の問題と同様のアプローチが出来ることが分かったと思う。

3.ダイクストラ法の計算量
　ダイクストラ法の関数内では、あるデータ構造Qを用いて、
-辺の本数回、Qに距離を入れる
-頂点の個数回、Qから最小のものを取り出す
この2つの作業がある。これらの計算量はQのデータ構造によって異なる。
Qに普通のベクターなどを用いると
-前者はO(E*1)
-後者はO(V*V) (確定した頂点を除く頂点への現時点での最短距離を保存するような感じにするといい)
でO(V^2)となる。なお後者はそれぞれ取り出す回数と取り出すコスト。
Qに二分ヒープを用いると
-前者はO(E*logV)
-後者はO(V*logV)
になるらしい。けどよくある実装だと確定した頂点への最短距離候補が全部pqに入ってるから
logVじゃなくてlogEになってる気がする。でもよくよく考えたら完全グラフだとしてもlogE<=2logVなので
定数倍にしかならないことに気づいた。まあだから高々E*logE~E*logVにしかならないんですね～
　これにより、完全グラフである場合には二分ヒープを使うとlogVかけてる分くらい計算量が悪化する。
でも実際これはあんまり気にならない(対数のパワー)。