                探索系
　定義域について探索して、それが条件を満たすか？や、
値域について探索して、それを満たすように構成できるか？
などの解法に用いられる超一般的なアルゴリズム

            シンプルな探索系
        1.全探索
    1.1.全列挙
　考えられる全てのパターンを実際に作ってみるアルゴリズム。
計算量:O(N)
    1.2.ビット全探索
　要素の組み合わせのパターン全てを確かめたい場合に使う全探索。
計算量:O(2^N)
    1.3.順列全探索
　要素を使う順番について全てのパターン確かめたい場合に使う全探索。
計算量:O(N!)
        2.二分探索
　ある連続な番号が割り振られた集合に対して、ある判定問題について、
ある要素を境に真偽を分割できることが保証されている集合に対して使えるアルゴリズム。
計算量:O(logN)
        3.深さ優先探索(DFS)
　グラフとみなせるデータ構造に対して、隣接ノードを記録していった時に、その中の探索済みでない新しいものを優先して
探索していくアルゴリズム。主に再帰関数で実装される。
        4.幅優先探索(BFS)
　グラフとみなせるデータ構造に対して、離接ノードを記録していった時に、その中の探索済みでない古いものを優先して
探索していくアルゴリズム。主にキューを用いて実装される。

            複合型の探索系
        1.半列挙
　分割して全列挙したのち要素を満たすものを二分探索などで探すことで、
普通に全列挙するとO(n^4)掛かるものを、n^2それぞれにlog(n^2)回の探索、にすることが出来たりする。


                動的計画法
　最善操作問題
